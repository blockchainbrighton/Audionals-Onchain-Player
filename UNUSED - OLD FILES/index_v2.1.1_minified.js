const audioContext=new(window.AudioContext||window.webkitAudioContext);let trimSettings,BPM,sequenceData;audioContext||alert("Web Audio API is not supported in this browser");const activeSources=new Set;let isLooping=!0,isStoppedManually=!1;const customLog=(e,t=!1)=>{(t?console.error:console.log)(e)},loadAudioFile=async e=>{if(!e)return customLog("Encountered invalid or missing URL in JSON",!0),null;try{const t=await fetch(e),o=await t.arrayBuffer();return new Promise(((e,t)=>{audioContext.decodeAudioData(o,e,t)}))}catch(e){return customLog(`Error loading audio file: ${e}`,!0),null}},calculateTrimTimes=(e,t)=>{const o=Math.max(0,Math.min(e.startSliderValue/100*t,t)),a=e.endSliderValue/100*t;return{startTime:o,duration:Math.max(0,a-o)}},calculateStepTime=()=>60/BPM/4,createAndStartAudioSource=(e,t,o)=>{if(!e)return;const a=audioContext.createBufferSource(),{startTime:s,duration:n}=calculateTrimTimes(t,e.duration);a.buffer=e,a.connect(audioContext.destination),a.start(audioContext.currentTime+o,s,n),a.onended=()=>handleSourceEnd(a),activeSources.add(a)},handleSourceEnd=e=>{activeSources.delete(e),customLog(`Handling source end. Active sources remaining: ${activeSources.size}`),0===activeSources.size&&isLooping&&!isStoppedManually?(customLog("All sources ended, looping is true. Starting playback again."),playAudio()):customLog("Playback finished or stopped manually.")},schedulePlaybackForStep=(e,t,o)=>{createAndStartAudioSource(e,t,o*(60/BPM/4))},playAudio=async()=>{if(!sequenceData||!sequenceData.projectURLs||!sequenceData.projectSequences)return customLog("No valid sequence data available. Cannot play audio.",!0);const{projectURLs:e,projectSequences:t,projectBPM:o,trimSettings:a}=sequenceData;BPM=o,stopAudio();const s=await Promise.all(e.map(loadAudioFile));if(!s.some((e=>e)))return customLog("No valid audio data available for any channel. Cannot play audio.",!0);stopAudio(),Object.entries(t).forEach((([e,t])=>{Object.entries(t).forEach((([e,t],o)=>{const n=t.steps,i=s[o],c=a[o];i&&n&&n.forEach(((e,t)=>{e&&schedulePlaybackForStep(i,c,t)}))}))})),isStoppedManually=!1,customLog("Scheduled playback for active steps in available sequences and channels"),0===activeSources.size&&isLooping?(customLog("No active sources at start of playAudio, looping is true. Starting playback again."),playAudio()):customLog("Active sources remain at the start of playAudio or stop was manual.")},stopAudio=()=>{activeSources.forEach((e=>{e.stop(),e.disconnect()})),activeSources.clear(),customLog("All audio playback stopped and sources disconnected")},setupUIHandlers=()=>{const e=document.getElementById("playButton"),t=document.getElementById("stopButton"),o=document.getElementById("fileInput");e&&e.addEventListener("click",(()=>{isLooping=!0,customLog("Play button pressed, attempting to start playback."),playAudio()})),t&&t.addEventListener("click",(()=>{isStoppedManually=!0,customLog("Stop button pressed, calling stopAudio."),stopAudio()})),o&&o.addEventListener("change",(async t=>{try{sequenceData=await processAndLoadAudio(t.target.files[0],loadAudioFile),sequenceData&&sequenceData.projectURLs.some((e=>e))?(e.disabled=!1,customLog("File loaded successfully. Ready to play. Click the play button!")):(customLog("No valid audio URLs found in the sequence data.",!0),e.disabled=!0)}catch(t){e.disabled=!0,customLog(`Error processing sequence data: ${t}`,!0)}}))};setupUIHandlers();